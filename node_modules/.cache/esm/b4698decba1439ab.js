let path,writeFile,promisify;_ba1‍.x([["default",()=>_ba1‍anonymous]]);_ba1‍.w("path",[["default",["path"],function(v){path=v}]]);_ba1‍.w("fs",[["writeFile",["writeFile"],function(v){writeFile=v}]]);_ba1‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);



const WriteFile = promisify(writeFile);

               async function _ba1‍anonymous(options) {
    if (options.bundlerName !== 'Vite') return;
    await WriteFile(path.resolve(options.PACKAGE_PATH, 'vite.config.js'), 
`import path from 'path';
import { defineConfig } from 'vite';
${ options.jsFremwork === 'VueJs' ? 'import vue from \'@vitejs/plugin-vue\';' : '' }

export default defineConfig({
    base: '/build/',
    publicDir: 'fake_diractory',
    build: {
        outDir: 'public/build',
        assetsDir: '.',
        rollupOptions: {
            input: [
                'resources/js/app.js',
                'resources/css/app.css'
            ]
        }
    },
    resolve: {
        alias: {
            '@': path.resolve('resources/js'),
        },
    },
    ${ options.jsFremwork === 'VueJs' ? 'plugins: [vue()]' : '' }
})`, { encoding: 'utf-8' })
}